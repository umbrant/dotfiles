" Vundle
set nocompatible " get out of horrible vi-compatible mode
filetype off " required for Vundle
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" Color schemes
Plugin 'inkpot'
Plugin 'molokai'
Plugin 'Zenburn'
" The rest
Plugin 'vimwiki/vimwiki' " wiki
Plugin 'scrooloose/nerdtree' " File browser
Plugin 'godlygeek/csapprox' " Make GVim color schemes work in terminal
Plugin 'tpope/vim-fugitive' " Git integration
Plugin 'tpope/vim-surround' " Easy surrounds
Plugin 'tpope/vim-sleuth' " Automatic indentation
Plugin 'godlygeek/tabular' " Required for vim-markdown
Plugin 'plasticboy/vim-markdown' " Markdown syntax
Plugin 'Pydiction' " Python syntax
Plugin 'fatih/vim-go' " Go syntax

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" General
set encoding=utf-8 " Unicode is nice
set history=1000 " How many lines of history to remember
set cf " enable error files and error jumping
set clipboard+=unnamed " shared clipboard between windows
set viminfo+=! " make sure it can save viminfo
set isk+=_,$,@,%,#,- " none of these should be word dividers, so make them not be
set nostartofline " leave my cursor where it was

" Theme

if has('syntax') && (&t_Co > 2) || has('gui_running')
    syntax on
endif

set background=dark

" IMPORTANT: Uncomment one of the following lines to force
" using 256 colors (or 88 colors) if your terminal supports it,
" but does not automatically use 256 colors by default.
set t_Co=256
"set t_Co=88
let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
colorscheme inkpot

" Viewport Controls
" ie moving between split panes
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Files/Backups
"set backup " make backup file
"set backupdir=~/.vim/vimfiles/backup " where to put backup file
"set directory=~/.vim/vimfiles/temp " directory is the directory for temp file
set makeef=error.err " When using make, where should it dump the file
set sessionoptions+=globals
set sessionoptions+=localoptions

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let vimDir = '$HOME/.vim'
    let &runtimepath.=','.vimDir
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
    set undolevels=1000
    set undoreload=50000
endif

" Vim UI
set lsp=0 " space it out a little more (easier to read)
set wildmode=longest,list,full " wild menu opts
set wildmenu " turn on wild menu
set ruler " Always show current positions along the bottom 
"set cmdheight=2 " the command bar is 2 high
set number " turn on line numbers
set lz " do not redraw while running macros (much faster) (LazyRedraw)
set hid " you can change buffer without saving
set backspace=2 " make backspace work normal
set whichwrap+=<,>,h,l  " backspace and cursor keys wrap to
set mouse=a " use mouse everywhere
set shortmess=atI " shortens messages to avoid 'press a key' prompt 
set report=0 " tell us when anything is changed via :...
set noerrorbells " don't make noise

set list " we do want to show tabs, to ensure we get them out of my files
set listchars=tab:»·,trail:· " show tabs and trailing whitespace

" make the splitters between windows be blank
set fillchars=vert:\ ,stl:\ ,stlnc:\

" Visual Cues
set showmatch
set matchtime=5
set so=10
set novisualbell
set noerrorbells
set laststatus=2

" Indent related
set nosmartindent " smartindent (filetype indenting instead)
set autoindent " autoindent (should be overwrote by cindent or filetype indent)
set cindent " do c-style indenting
set softtabstop=4 " unify
set shiftwidth=4 " unify
set tabstop=4 " real tabs should be 4, but they will show with set list on
set copyindent " but above all -- follow the conventions laid before us
set smarttab
filetype plugin indent on " load filetype plugins and indent settings

" Text Formatting/Layout
set formatoptions=ronl " See Help (complex)
set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
set expandtab " no real tabs please!
"set nowrap " do not visually wrap line
set textwidth=0 " do not physically wrap lines
set preserveindent " but above all -- follow the conventions laid before us
set ignorecase " case insensitive by default
set smartcase " if there are caps, go case-sensitive
set completeopt=menu,longest,preview " improve the way autocomplete works
"set cursorcolumn " show the current column
set grepprg=grep\ -nH\ $*

" Folding
set foldenable
set foldmethod=indent
set foldlevel=100
set foldopen-=search
set foldopen-=undo

" Spelling
set spell
setlocal spell spelllang=en

" Filetype settings
" Don't forget to break these out into an ~/.vim/ftplugin file if it gets
" excessive.
autocmd FileType c,cpp,slang set cindent
autocmd FileType c set formatoptions+=ro
autocmd FileType css set smartindent
autocmd FileType html set formatoptions+=tl
" Most python opts are split out
autocmd FileType python set omnifunc=pythoncomplete#Complete

" Search & Replace
set ignorecase
set smartcase
set hlsearch
set incsearch

set wmh=0

" NERD_tree config
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\~$']
let NERDTreeShowBookmarks=1
map <F3> :NERDTreeToggle<CR>

" Syntax for multiple tag files are
" set tags=/my/dir1/tags, /my/dir2/tags
set tags=tags;$HOME/.vim/tags/

" TagList Plugin Configuration
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Close_On_Select = 1
let Tlist_Use_Right_Window = 1
let Tlist_File_Fold_Auto_Close = 1
map <F7> :TlistToggle<CR>

let g:vimwiki_list = [{'path': '~/Documents/vimwiki'}]
